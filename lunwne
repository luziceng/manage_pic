  学号2011301500064
                                              密级 _____________


武汉大学本科毕业论文



基于web的
菜式推广应用管理平台设计开发







院（系） 名 称：计算机学院
专 业 名 称  ：计算机科学与技术
学 生 姓 名  ：吕志成
指 导 教 师  ：王翀 讲师

二○一四年六月


郑 重 声 明


本人呈交的学位论文，是在导师的指导下，独立进行研究工作所取得的成果，所有数据、图片资料真实可靠。尽我所知，除文中已经注明引用的内容外，本学位论文的研究成果不包含他人享有著作权的内容。对本论文所涉及的研究工作做出贡献的其他个人和集体，均已在文中以明确的方式标明。本学位论文的知识产权归属于培养单位。




本人签名：                     日期：               















摘  要
因为我国服务产业的迅猛发展，许多餐馆越来越重视“排队服务”。与此同时，移动端设备的发展越来越快，移动端的各种应用也越来越丰富，普通消费者使用的频度和时长也大幅提升，针对移动端消费者定制的各类移动端应用和对应的服务器端管理平台也越来越普遍。
在近年来，在近年来，商家越来越重视顾客，很多商家充分利用顾客排队等待的时间，以便给消费者留下良好的印象。利用移动端应用帮助消费者打发时间并推广商家形象的方式在现阶段无疑是创新性的，面向消费者的菜式推广移动端应用具有较大的市场潜力。
为了能够让商家定制移动端应用内的菜式内容，基于web的菜式推广应用管理平台营运而生。本课题提供一个web管理平台，方便商家注册并定制移动端的内容，使得移动端应用能够更加有效的推广商家形象。
本课题研究此平台潜在客户的需求，提炼出相关功能模型，对菜式推广管理平台整体实现进行设计，并使用Python语言开发了针对商家的web管理平台，本文详细描述了web平台设计与开发实现的细节。
本课题的创新角度和平台实现，使得商家能够定制个性化的移动端应用，从而使得商家和消费者能够得到更大的互惠和共赢。
关键词：排队服务；菜式推广，web平台












Abstract
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
8
8
8
*
*
*
目  录


*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*

*
*
*
*


1 绪论
随着大众收入水平和生活水平的不断提高和生活节奏的日益加快，城市居民外出就餐比例逐年上升，随之带来的是餐饮企业的总体服务需求日益增加，这样一方面给餐饮企业带来了较大的经济收益，而另一方面则对餐饮企业的服务能力提出了较高的要求。由于顾客用餐时间集中，餐饮业的顾客需求具有波动性，而餐饮企业的服务能力在一定时期内是相对固定的，因此，在就餐高峰期时不可避免的出现排队等待现象，顾客等待时间的长短是衡量服务水平的重要标志。一方面，从顾客的角度来说，排队等待会严重影响顾客感受到的服务质量；另一方面，排队现象存储了餐饮企业的消费者，添加了餐饮企业的经济收入。
既然排队等待在餐饮企业达到一定程度后是不可避免的，那么减少消费者的排队时间就是一项比较重要的事情。消费者的等待时间分为两种，一种是消费者客观等待时间，即消费者在排队等待中花费的实际时间；另一种是消费者主观等待时间，即消费者在排队等待过程中自己感觉花费的时间。在餐饮企业自身的服务能力有限的情况下，想要显著的缩短消费者客观等待时间无疑是比较困难的。因此为了挽留住排队等待的用户，从消费者主观等待时间入手能取得较大的效果。
现有的餐饮企业解决用户主观等待时间的方法主要包括是：让消费者排队按号等待，在消费者等座的过程中给消费者提供茶水，提供简单的休闲娱乐。通过这样的方式能够较大的缩短用户的等待时间，但是这样的方式无疑会需要多余的人力物力达到目的，而消费者的主观等待时间在大多数时候并没有降低。
随着智能手机的普及和休闲游戏的流行，很多年轻消费者会花较多时间在休闲游戏app上。因此本课题就从这里切入，现在的商家通常都为消费者提供免费的WIFI来吸引用户，商家还可以使用我们提供的菜式推广移动端应用，商家通过在菜式推广应用管理平台定制在移动端应用里面的菜式图片，可以推广自己的热门菜式，同时消费者可以通过玩通一定关卡获得相应菜式的优惠。
通过本课题的创意以及产品实现，用户的主观等待时间将会大大减少，同时有利于消费者与商家的双赢。下面具体阐述本科提的各方面北京和研究意义。
   1.1 排队服务的背景与研究意义
提到国内的优秀餐饮企业，“海底捞”火锅店必然居于榜前，根据最新北京市的饭店排名中，海底捞饭店排名第一位，这一本源除了以优质的食品质量和服务，更在于它的高档排队服务平民化。细究其经营模式可以发现，“海底捞”的出名与优秀不仅仅是其优秀的管理模式培养了一批忠心且互帮互助的员工，更优秀的在于其提供的“排队服务”独树一帜，给排队的消费者一种宾至如归的体验，这是其他餐饮企业很难模仿的一种排队服务，从而使“海底捞”居于餐饮企业榜前。
     海底捞在消费者排队等待的时候，不是让消费者白白的等待，而是充分关怀消费者的排队体验，给予消费者良好的排队等待体验。当海底捞的消费者在排队等待就餐的时候，海底捞提供给消费者免费食物，例如西瓜，苹果，花生等水果，炸虾片，炸薯条等小吃，还有柠檬水，豆浆，薄荷水等饮料。用户还可享受其他的服务，例如免费WIFI上网，纸牌玩耍，甚至还有女士美甲与男士擦鞋服务。海底捞给排队等待用户提供的服务已经远远颠覆了一般餐厅的概念，用户即使只在等待区等待也是一种良好的体验。排队等位成为了海底捞的特色和招牌之一，海底捞成功让原本索然无味的排队等待过程成为一种值得期待的服务，并进而实现品牌效应的推广与经济收益。
海底捞优秀的排队服务面向的受众是它的任意一名消费者，这使得任何普通的工薪家庭和学生以普通的价格享受到超越一般星级酒店的服务，有利于餐饮企业充分收纳这部分排队等待消费者。海底捞选择将舒适的排队服务作为其主要卖点之一，将消费者的整体消费体验做到极致，使得“排队服务”成为海底捞的口口相传的品牌，这样也使得海底捞成为餐饮行业其他竞争者无法模仿的品牌，并将长久保持活力。
海底捞的优秀排队服务使得其在餐饮行业独树一帜，而其他餐饮企业也活多或少也提供了排队服务，来减少用户的主观等待时间，从而挽留住这部分顾客。例如小火锅连锁店“豆捞坊”，烤肉连锁店“韩善宫”会为等待的消费者提供免费的饮品和小吃食物，还有的餐厅会使用电子叫号排队等待系统，消费者可以不用在店内等待，到时间消费者的手机会收到短信通知，类似的“排队服务”例子还有很多。这些重视了排队服务的商家在同行中无疑都算是佼佼者，提升了自身的形象。
前面已经论证了在餐饮企业自身服务能力有限的情况下，排队现象将会不可避免的出现。减少消费者的客观排队等待时间无疑要求提高餐饮企业自身的服务能力，对于规模成型的餐饮企业要进一步提升服务能力无疑比较困难，而从消费者的主观排队等待时间入手，需要的服务能力成本相对与减少消费者客观等待时间来说相对少很多，有利于商家成功吸纳这部分排队的消费者，提高餐饮企业自身的经济收益，而能够做到譬如海底捞这样程度的还能形成良好的品牌效应，带来良好的经济循环效应。
本课题提出的应用则是排队服务一个新层面上的实现。商家通过菜式推广应用管理平台定制移动端应用的热门菜式图片，商家再将移动端应用通过免费WIFI的方式提供给消费者，消费者通过玩移动端上的应用就可以提前得知商家的招牌菜式和热门菜式，当用户玩游戏玩到一定关卡后就可以获得菜式优惠。当这部分消费者进行消费时就可以提前知道餐厅的热门菜式，并可以使用获得的菜式优惠。通过我们设计的移动端应用和web端菜式推广管理平台，可以让消费者与商家实现双赢：消费者获得优惠，商家宣传自己品牌。
由于移动端应用APP已经研发完毕，本课题着手使用python的tornado框架开发WEB端菜式推广管理平台提供给商家使用。
1.2 选择	WEB端管理平台及选择python的理由
开发一个管理平台通常有两种形式，一种是桌面软件形式，另外一种则是web端网页形式，如何选择这两种平台，需要我们具体分析其利弊。
桌面软件需要针对每一种操作系统做其兼容性，例如很多win7下的软件在win8都不能良好的运行，每种操作系统平台都需要使用特定的操作语言，例如C++的QT，C#，而针对每一种开发语言，又需要使用到各自的开发报，开发工具，以及各自的环境配置，开发需要兼顾到操作的特异性。更重要的是，当软件需要更新功能，或者软件需要更新版本来修复bug的时候，用户不得不重新下载软件，而新的版本功能又需要与以前版本的功能相兼容，这样会导致桌面软件的后期维护越来越麻烦，而且功能臃肿。
WEB端的管理平台则有自己的优势，web端应用的界面使用统一的html+css+javascript来实现，而且很多框架例如css里面的bootstrap框架和javascript里面的jquery已经帮我们做了很多事情，做出一个美观实用的界面比做桌面软件的时候容易许多。更重要的是，访问web端的管理平台不需要下载软件，直接通过浏览器就可以访问，当需要更新管理平台的功能或者修复bug的时候，只需要在服务器端更新就行，用户立马就可以访问到更新后的页面。而本课题设计的菜式推广应用还需要与移动端应用进行数据交互，从这一方面来说，web端管理平台更适合，可以在开发web端管理平台的同时，同时提供给移动端应用访问后台的接口。
综合以上因素，本系统研发选择web端开发。
而web端开发一个动态网站也有需要选择的地方，尽管前端开发语言是统一的，但是后台开发选择也有很多，例如：基于SSH框架的jsp，基于.Net技术的Asp，已经有各种例如wordpress的成熟程序的php，以及具有各种web应用框架的web.py，flask，django，tornado等的python语言，在经过一番比较后我选择了python的tornado框架。
Jsp解决方案主要使用的是ssh框架，这需要对java语言有基本的了解，并了解java的面向对象思想，学习ssh框架的使用和配置，需要比较大的学习成本，由于本人曾经有一段时间进行过这方面的开发，对jsp的struts，spring，hibernate框架有一定的了解，知道其配置的繁琐性。尽管jsp是这几门语言里面运行速度相对最快的，但是本课题并不需要达到这种运行速度，又由于其配置的繁琐性，本课题没有选择jsp。
基于.Net的Asp由于是微软自身开发的一套开发语言，只能运行在windows系统上，尽管在最近微软将.Net的适用平台扩大到所有平台了，但是由于我以前并没有接触过.Net，在较短的时间内掌握.Net并开发出本课题所需要的菜式管理推广平台需要较多的时间，因此暂时不考虑。基于同样的理由，尽管php语言简单，学习成本低，但是php语言的本身类似于linux下的脚本，语言风格不喜欢，也没有选择这语言。
最后我选择的解决方案是python的tornado框架，原因之一是我使用python进行过一段时间的开发，并喜欢上了python语法与书写规则的简洁，python还有简单易用的各种各种三方库。而tornado框架是一个异步非阻塞的框架，具有很高的响应比，能够处理大于1万的并发，且使用简单，比java的ssh框架使用简便很多，比较适合本课题的需要，能够在短时间内实现菜式推广管理平台。而且由于python各种三方库完善，如果以后要扩充本系统，也十分简单方便，相比与php只能实现简单的后台功能相比，无疑python更适合本系统的开发。


1.3 本文主要工作 
鉴于菜式推广的移动端应用已经完成，但是缺乏一个完善的后台管理系统来定制移动端的菜式图片与菜式优惠，缺乏与后台数据交互，因此本课题着力于使用tornado框架开发一个适用于商家使用和移动端获取数据的菜式推广应用管理平台。为实现者一幕表，本文主要完成如下工作:
（1）平台功能设计来自于思考商家的使用需求与移动端应用的需求。在总结了应用需求之后，我们仔细研究了用户的需求，并且研究了用户特征。
（2）平台的交互设计及系统设计
Web平台依赖于良好的前端UI呈现交互和后台数据处理能力。随着人们对网站的要求越来越高，良好的UI界面与交互设计和及时的数据响应能力无疑是很重要的部分。在处理交互设计之外，本系统还研究了商家使用本系统的需求，同时考虑到移动端应用需要的数据交互，充分思考部署了web后台的框架结构。
（3）web菜式推广应用管理平台开发
本项工作成功实现了菜式推广管理平台的开发与实现，提供了商家上传菜式和更新菜式的接口，也有后台超级管理员审核信息的平台，同时提供了移动端应用获取数据的接口。
1.4 论文组织结构
本文分为五章，主要结构如下：
第一章：绪论。介绍课题研究背景及意义，介绍排队服务的必须性与及选用平台的理由。
第二章：tornado框架介绍，分析tornado框架对HTTP请求的处理与tornado框架对于模板系统的继承与套用，tornado框架提供给开发者的高级功能，并分析缓存性数据库redis的原子操作性。为平台的开发提供理论支持。
第三章：平台设计。通过研究平台的需求，设计后台数据库和系统功能，对整体架构进行了思考，并且介绍了开发工具以及环境配置。
第四章：平台开发实现。介绍了平台开发功能点的设计，描述了平台开发实现中的关键细节。
第五章：总结和展望。对课题内容作出总结，对课题的研究发展方向作出未来规划和展望。





















          2 WEB后台框架tornado的研究
2.1 python语言的现状和前景。
Python语言，是一种使用了面向对象思想的计算机程序语言，具有近20年的发展历史，其语法相当简单，与其他语言，例如c，java等语言需要使用大括号来定义语句块不一样，python使用缩进来定义语句块。Python语言是一种函数式编程的动态语言，能够自动管理内存。python虚拟机本身几乎可以在所有的操作系统中运行，使用一些PyInstaller之类的工具可以将python源码转换成独立运行运行的程序，使得用户使用程序就如同使用其他语言编译出来的程序一样不再依赖python解释器。
Python语言的开发是完全开源的，社区对开发进度的影响慢慢变大，python是完全面向对象的语言，函数，模块，数字，字符串都是对象，且完全支持继承，重载，派生，多重继承，有利于源码的可用性和复用性。Python同时支持重载运算符，因此python也支持泛型设计。Python语言本身被涉及为科扩充的，并不是所有的特性和功能都被集成到了语言核心，python自身提供了丰富的API和工具，程序员可以轻松的使用其他语言来编写扩充模块，python语言有“浇水语言”的称号也是由此而来。
Python程序常常被用于web开发，apache可以运行由python写的web程序，也有python语言写的Guniron服务器。一些web框架。例如Django，Pyramid，Turbogears，Tornado，Zope，Flask等，可以很轻松的实现web应用后台，方便程序员轻松的开发和维护功能庞大，逻辑复杂的web程序。Python对于各种网络协议的支持很完善，因此经常被用于编写服务器端程序，比起php只能支持简单的后台好很多。更有第三方库Twisted支持异步在线编写程序和多数网络协议，并提供了多种编程工具，广泛的被用在编写高性能的服务器端程序，更支持高性能高并发的网络程序开发。
Python的wxPython和PyQt可以用来开发支持扩平台的桌面软件，这些桌面软件运行速度快，通过PyInstaller还能将程序发布为独立安装包。而在很多操作系统里面，python是标准的系统组建，继承了Python。同时Numpy，SciPy可以让程序员编写科学计算程序。
Python使用缩进来标记程序代码块，以便让程序员养成良好的变成习惯。Python除了支持一般的控制刘语句外，还支持with语句程序快来加锁解锁，同时python是面向对象的开发方法，python的数据类型是动态的，类型可以随意变换。Python拥有强大的标准库，python标准库的主要功能包括，文本处理，文件处理，操作系统功能，网络通信，网络协议，w3c格式支持，国际化支持，数学运算等等。
使用python编写的著名应用包括：豆瓣网，知乎，Dropbox，果壳等web应用，webpy，flask，bottle等微web框架，而在google，facebook等大型互联网公司也有很多产品使用到了python，python作为一种语法简洁，功能强大的语言，其优势是毋庸置疑的。

   2.2 Tornado框架介绍和使用
    Tornado(Tornado Web Service)事宜哥使用python语言编写的web服务器，同时它也是一个web应用框架，被facebook以开源软件的形式开放给大众，从而使得绝大多数程序员能够使用它。
    Tornado作为一个web框架，它是一个轻量级的web框架，类似与python的web.py这个服务器框架，但是tornado拥有优秀的异步非阻塞IO处理方式。Tornado作为web服务器，tornado的抗负载能力比较出色，facebook官方将tornado与其他的python应用框架进行对比，tornado的最大浏览量远远超过其他类似的框架。
Tornado有优秀的服务器抗负载性能，它试图处理大于或等于一万的并发，亦即C10k的问题。关于python的诸多web应用框架的并发能力，下面的图报已经给出数据，充分说明了Tornado优秀的高并发性能，适合于高并发网站的构建。






处理器为 AMD Opteron, 主频2.4GHz, 4核
服务	部署	请求/每秒
Tornado	nginx, 4进程	8213
Tornado	1个单线程进程	3353
Django	Apache/mod_wsgi	2223
web.py	Apache/mod_wsgi	2066
CherryPy	独立	785
(表2.1 tornado与其他python框架并发能力的对比)

2.2.1 tornado框架搭建web服务的简单配置
一个使用tornado框架搭建的例子(hello.py):
import tornado.httpserverimport tornado.ioloopimport tornado.optionsimport tornado.webfrom tornado.options import define, optionsdefine("port", default=8000, help="run on this port", type=int)class IndexHandler(tornado.web.RequestHandler):    def get(self):        greeting = self.get_argument('greeting', 'Hello')        self.write(greeting + ', friendly user!')if __name__ == "__main__":    tornado.options.parse_command_line()    app = tornado.web.Application(handlers=[(r"/", IndexHandler)])    http_server = tornado.httpserver.HTTPServer(app)    http_server.listen(options.port)    tornado.ioloop.IOLoop.instance().start()
    编写一个tornado应用中最多的工作是定义继承了RequestHandler类。在上面的程序中，我们创建了一个简单的应用，在默认的8000端口监听请求，并在根目录(“/”)响应请求，在该程序文件所在目录的终端里面通过输入:python hello.py --port=8000 来响应http请求。在浏览器中打开http:localhost:8080即可访问到我们的应用。
下面详细的分析上面的这个例子。
 import tornado.httpserver	import tornado.ioloop	import tornado.options	import tornado.web
在程序的顶部我们导入了一些tornado模块，这四个模块是运行简单的tornado应用不可或缺的，
 from tornado.options import define, options	define("port", default=8000, help="run on this port", type=int)
    这一行代码定义了一个全局参数port，值为8000，如果在命令行中一个与define语句相同的设置名被给出，例如 “--port=9000”，则该设置名为options的全局变量，可以在程序的任何地方被访问到。如果没有在命令行里面定义该变量，则会使用上面语句里面的default的值作为该变量的值。
class IndexHandler(tornado.web.RequestHandler):    def get(self):        greeting = self.get_argument('greeting', 'Hello')        self.write(greeting + ', friendly user!')
这里定义了一个请求消息处理类，该类继承tornado.web.RequestHandler，这个类是我们需要做核心编程的地方。该类默认有诸多内建方法，其中常见的get()，post()方法处理的就是HTTP请求的get请求和post请求，get_argument(“hello”,”hello1”)用于从一个字符串中获取参数hello的值，如果hello这个参数没有在查询字符串中，则会使用”hello1”作为默认值。
Self.write(“something”)将字符串作写入到HTTP响应中。类似的还有self.render(“a.html”)自己重定向到a.html的内容中。Self.redirect(“/pwd”)则将http请求重新定向到/pwd的请求路径。
tornado.options.parse_command_line()    app = tornado.web.Application(handlers=[(r"/", IndexHandler)])
第一行代码解析命令行，第二行代码创建了一个Tornado应用类实例，其中handlers参数最重要，这行代码告诉tornado把“/”的请求交给IndexHandler来处理。
http_server = tornado.httpserver.HTTPServer(app)    http_server.listen(options.port)    tornado.ioloop.IOLoop.instance().start()
这三行代码将会被反复执行，tornado的HTTPSERVER对象将会监听port对应的端口，当该端口被访问，tornado会创建一个IOLOOP的实例，让该请求被对应的处理类响应处理。

2.2.2 tornado的表单和模板
在web应用里面，模板指的是一个允许嵌入后台开发语言的html文件。Tornado自身提供了一个轻量级，快速而且灵活访问的模板语言，该模板位于tornado.template中。
在上面的例子中，配置访问路径与处理方法的设置为：
app = tornado.web.Application(handlers=[(r"/", IndexHandler)])
为了能够使用tornado的模板(html)功能，需要将本设置做一些添加，更改为如下的形式：
app = tornado.web.Application(        handlers=[(r'/', IndexHandler),
    (r'/poem', PageHandler)],        template_path=os.path.join(os.path.dirname(__file__), "templates"),        static_path=os.path.join(os.path.dirname(__file__), "static"),        debug=True    )
其中(r”/poem”，PageHandler)将 /poem的请求交给PageHandler来处理，template_path变量存储的是模板文件存放的地方，一般设置为如上的当前文件路径下的templates文件夹。static_path变量存储的则是静态资源文件如javascript脚本，css脚本，图片等静态资源的地方。Tornado根据templates_path查找模板文件，根据static_path查找静态文件(不会变化的文件，例如网页里面的js文件，css文件，图片文件，以及开发者希望前端能够直接访问的文件)。只要我们告诉tornado在哪里找到模板后，使用tornadoRequestHandler类的render方法来告诉tornado在templates_path下读入模板文件，再将模板文件中的代码替换成html标记内容，得到的就是我们常见的html文件，tornado再将结果返回给浏览器。
在继承了tornado.web.HTTPRequestHandler的类中，为了使tornado能够访问模板文件，并将之转换为http流，使用self.render(“welcome.html”,arg1=arg1, arg2=arg2)即可。通常模板文件里面都有python程序传递进去的变量，为了将这些变量转换为html标记内的内容，在模板文件里面将需要传递到html流的变量使用{{}}括起来，其中双大括号里面的变量名必须是self.render()里面传递进来的参数名。
除了在模板文件里面使用{{}}传递变量，tornado还支持在模板文件里面使用控制流，例如if，for，while等基本控制流，其形式形如：{% if arg1 != None %}。。。（what you want to do）。。。{% end %}，即使用{%%}来包围控制语句，并以{%end%}作为控制流语义块的结束。通过{%%}控制流和{{}}的变量填充，在大部分情况下，我们便能将模板文件转换成希望的HTML流展示给前端。
在模板文件里面为了能够访问到作为静态资源的css文件，图片文件和js文件，需要在模板文件里面使用{{static_url(“the file you want to get”)}}或者使用/static/file来得到即可。通过这样的方法，最终得到的HTTP流就可以呈现各种web页面的效果了。
tornado除了提供简单的控制流if，while，for语句以外，还为所有的模板提供了一些便利的函数，例如escape(s)，url_escape(s)，json_encode(val)，ssqueeze(s)等函数，主要作用是对字符串，url做过滤，去除危险字符，或者将v键值对转变成json。开发者可以自己定义在模板文件中使用的函数，使得模板文件在转换成为HTML文件流的时候具有更大的灵活性。但是这些功能在大多数的开发过程中较少用到，因为这些函数提供的功能大多数在参数传递到模板文件前就可以对参数预先做处理。
Tornado模板系统通过上面的方法可以简单的传递信息给网页，使得我们在插入动态数据的时候还能保持网页标记的整洁。除此以外，tornado还提供块，替换和继承机制，使得我们可以复用例如head，frame和网页布局这样的内容。
为了扩展一个已经存在的模板，我们需要在新的模板文件顶部加上一句：{% extends from “father.html”%}，其中father.html为已经存在的模板，那么新模板将会复制father.html所有的内容。为了方便子模板能够改变父模板的某些内容，我们可以在父模板里面某些代码块使用{% block blockname %}{%end%}来做标记，接着在子模板里面使用{% block blockname %}{%end%}来重写父模板里面对应代码块的内容，从而实现父模板与子模板的特异性差别。

   2.3 tornado框架特性：编写安全应用。
Web网站的开发要素，功能点实现和web页面呈现将会占据开发过程中的大部分精力，但是web网站的安全特性也是网站开发过程中不可忽视的一部分。如果开发过程中不重视web安全，最终成型的web网站可能会被相关有心人找到漏洞，网站的隐私信息可能被相关人士恶意利用。Tornado框架自身针对网络安全做了一定的设计，方便开发人员搭建一个较为安全的web网站。
2.3.1 tornado关于cookie漏洞的防御
很多网站使用浏览器的cookie来存储某个用户会话期间的身份标识，网站也可以使用cookie存储客户端的某些重要信息。但是在浏览器中有很多方法获取或者更改cookie，使得cookie变得不再可信，网站变得不再安全。针对cookie安全，tornado提供了安全cookie策略。Tornado的安全cookie使用加密签名来验证cookie的值。如果一个cookie的值被非服务器端的软件更改过，由于恶意脚本不知道cookie的密钥，服务器端用数字签名就会知道该cookie被更改过。
在tornado里面使用安全cookie非常简单，在继承了HTTPRequestHandler的类里面使用set_secure_cookie(name,value)就可以设置一个经过加密签名的cookie，使用get_secure_cookie(name)返回name对应的cookie的数值。Tornado将cookie值编码为base64，并根据时间戳和cookie内容生成一个hash签名，tornado会根据时间戳来判断cookie的的合法性，如果时间戳不合法或者cookie值被更改，get_secure_cookie将会返回None，通过这样的方式可以一定程度上的保护cookie的安全。
2.3.2 tornado用户认证
大部分的动态网站都有用户认证这个环节，tornado也帮开发者封装了用户认证这一部分的内容，让开发者更容易的实现用户认证这个环节。
当某个人首次在访问某个网站没有包含用户认证信息的cookie时，用户将会 被重定向到登录界面，当用户提交登录信息后，在处理用户登录信息的方法里面设置对应的cookie给用户，则在cookie未过期的情况下该用户的状态就是登录状态，而且用户的个人信息例如username也被保存到self.current_user里面，这样不论是模板文件还是后台代码都可直接访问到该变量。
为了能够使用tornado自带的认证给的功能，开发者需要在代码方面做以下设置：
1.在用户登录的处理方法中需要设置一个安全cookie
2.定义一个父类，继承自tornado.web.RequestHandler，需要重新定义ReqeustHandler里面的get_current_user()方法，通常是返回上一步设置的cookie值，该函数返回的值可以被其他地方使用self.get_current_user访问到。所有其他路径处理类均继承自这个父类。
3.在 tornado.web.Application的配置信息里面添加一条：“login_url”:”/login”。
4.在涉及非登录状态下的不能访问的路径对应的处理方法前面加上@tornado.web.authenticated装饰器，该装饰器确保在处理方法调用前，检查self.get_current_user的返回值，如果有值，则调用处理方法，如果没值，则重定向到配置文件的login_url对应的路径。

（redis的介绍可以顺带介绍，如果字数不够的话。。。。。。）
2.4本章小结
本章首先介绍python语言的特点，再使用网站每秒承受的访问量来横向对比python的各种web应用框架，之后介绍了tornado的基本用法，包括tornado的基本配置，tornado的模板与表单，tornado的安全cookie以及tornado的用户验证机制。通过以上学习的准备，为接下来的功能设计和平台开发提供了良好铺垫。

3 菜式推广应用平台的设计
通过系统的分析明确需求，确定平台必须要做的事情，分析实现平台的功能需要的框架图的得到分析模型。然后将分析模型变换成设计模型，进一步细化，通过对平台的概要设计和详细设计，在从技术的角度审视平台的功能要求，将需求量化成开发所需的要素。
3.1平台的需求分析
需求分析是软件工程中至关重要的一个环节，也是软件工程中最困难的一个环节，系统分析员和软件设计师需要与顾客反复沟通，以便明确顾客的需求，继而确定本管理平台的需要做什么，再针对平台功能实现做设计，为后面的平台开发做铺垫。
本平台着力于为商家提供一个可以上传热门菜式图片，管理菜品优惠的管理系统，同时也要为移动端应用提供接口以便获取到菜式图片。另外需要有系统管理员对商家上传的信息进行审核以防用户上传非法信息，系统管理员需要将移动端应用里面的游戏信息放到后台数据库。
3.1.1 平台的使用用户
本平台的使用用户是各个餐饮企业的商家，他们最关心的是与本平台进行数据交互的移动端应用能够给商家自身带来更多的经济和品牌效益。商家通过注册并被审核通过后，他们希望通过使用该平台充分利用移动端应用，使得商家能够获得更大的利益。
另外本平台还需要有系统管理员，来审核用户上传的文字信息和图片信息，同时要求能够监视用户的关键性操作，以便系统管理员维护本平台基本功能。
3.1.2  平台的功能分析 
根据目标用户的需求，进行鉴别、综合和建模，分析应用的数据要求，为原始问题及目标软件建立逻辑模型，逐步细化软件的要求，分析软件要处理的数据域[18] 。这个平台是为了帮助商家定制移动端应用界面的菜式图片，菜式优惠与游戏归属。为了实现这个目标，需要在管理平台设计良好的数据库，针对商家用户的需求设计良好的界面展示和体验交互，从而帮助商家更好的使用移动端应用拉拢排队用户，并同时推广自己的菜式。

(图3.1 平台应用功能示意)
    由于商家的行为具有不可控性，如果用户上传了非法图片，或者在文字描述里面提供了非法信息，需要有人控制，否则这些信息将会被移动端应用获取并被散播出去。因此本管理平台的另外一种角色，系统管理员也是功能需求的一部分，系统管理员需要审核注册用户，审核用户注册信息，更新后台游戏资料，监控用户操作行为等基本功能。
下图为本管理平台的功能模块图，由于移动端应用的开发者已经不在开发组，无法与其协商服务器端与移动端沟通的方式，在本平台的功能设计里，只开放了部分端口供移动端设备获得数据。另外，在后台可以实现座位使用情况实时监控，以便客户端访问，但是由于个人开发时间与精力所限，这部分内容尚未实现。


3.2 应用设计的原则
应用的设计是在软件开发生命周期中重要的一个阶段，我们虽然不能保证好的应用设计必定产生好的软件应用，但是一个差的应用设计必定会产生一个差的软件应用。针对这个应用，应用的设计应该遵循以下几个原则：
合适性
因为管理平台的使用者商家和管理员主要通过电脑端浏览器来访问本管理平台，不存在屏幕尺寸限制的问题，所以我们的界面设计主要适用于PC端的前端布局样式。为了免去一些繁琐而不必要的操作，管理平台的功能模块需要醒目而明显，方便用户迅速找到自己需要的功能。而为了能够应对来自浏览器和客户端的高访问量，需要充分利用tornado的异步访问方式，以便能够更快的相应各种请求。
因而在平台设计中，用户登录后支持的操作模块已经放在程序顶部，方便用户使用。而针对每一个访问请求，都使用tornado的异步访问编码，以便达到高响应比
结构稳定性
体系结构是应用设计的第一要素，如果体系结构经常变动，那么建筑在体系结构之上的用户界面、数据库、模块也会经常跟着变动，所以只有体系结构在一定时间内保持稳定不变，才能顺利开展后续的工作。
可扩展性
可扩展性越好，表示软件适应“变化”的能力越强，在后续的平台升级方面就更容易些[18]。结构的稳定性和应用的可扩展性并不冲突，因为软件应用可扩展的前提条件应用必须具有稳定的结构，所以稳定性和扩展性都是应用设计的要素。 对于此管理平台，由于tornado的每一种访问路径都需要编写一个处理类，因此其扩展性良好。对于任意的功能拓展，只需要在配置文件里面添加处理类设置，再编写相关的处理类实现即可。
可复用性
复用就是指重复利用已经存在的东西，复用是对已有资源的合理利用，通常一个新的应用里，大部分的内容都是成熟的，只有小部分的内容是创新的。可复用性是设计出来的，而不是偶然碰到的。要是体系结构具有很好的可复用性，我们必须分析应用域的共性问题，然后设计出通用的体系结构模式，这样的体系结构才能被复用。对于本平台，由于应用涉及到许多的数据库的操作逻辑，很多时候这些操作逻辑都是重复的，可以直接被复用，可以将这些会被重复使用的操作逻辑提取出来，实现复用性。
3.3 应用架构设计
MVC 作为最为常见的软件开发模式，将业务处理、表示和控制分离开来。
V 代表 View，用于向用户呈现软件交互界面，在web程序中的视图对应于相关活动的界面。视图的组织是通过模板文件目录下的模板文件和静态文件夹下的css布局文件和js脚本文件实现的，它们一般位于程序目录的templates文件夹和static文件夹下下，这些文件再加上模型返回的参数共同构成呈现给用户的网页流。
C 代表 Controller，是模式中的控制器，负责视图和模型之间的业务流程控制。控制器在两个方向上起到作用：一方面是将用户对界面的操作映射到具体的模型上，完成相关业务逻辑的处理；另一个方面，将模型处理之后的结果反应到视图当中去。在tornado框架中，实现控制器的方式主要是指tornado配置里面的路径-处理类，将每一个访问路径映射到其对应的处理类上，另一方面主要指self.render(“demo.html”,*args),self.redirect(“/demo”)和self.write(“demo”)这三种方式，这三种方式将处理后的结果返回到视图中。
M 代表 Model，即模式，在模式中主要包含了业务处理和数据交互模块，tornado自身没有提供类似于django和java的 关系映射框架，所有其数据库访问都是直接编写的。
MVC 模式的采用具有一些明显的优点，首先是设计分层，使程序具有更加清晰的结构，程序健壮性得到提升的同时也提高了维护的方便性。[19]
4 应用开发实现
4.1 设计与开发工具
4.1.1 设计工具
由于本平台的功能并不是太复杂，对于web前端的美观性要求也并不太高，因此采用了css+js+jquery实现前端页面的设计与实现，在保持不影响用户体验的情况下，参考bootstrap的前端设计，尽量将界面设计得简约得体。
4.1.2 开发工具
PyCharm是众多Python IDE的一种，python自身有两种，一种是社区版免费模式的，另外一种是专业版收费的，由于本平台开发环境不需要特别多的功能，选择社区免费版即可。 PyCharm带有一般IDE带有的一系列的工具，比如调试、语法高亮、Project管理、代码跳转、智能提示、自动完成、单元测试、版本控制。除此以外，PyCharm还提供了对HTML,，CSS，JS的编辑操作支持，使得PyCharm对于web应用开发的支持更加完善该IDE提供了一些高级功能，以用于支持python框架下的专业Web开发。
PyCharm自身支持的优秀功能主要包括如下：
1.项目代码跳转；
2.代码分析与建议优化。
3.支持google app引擎；
4.支持django框架和tornado框架；
5.集成版本git控制，
6.图像页面调试器和集成的单元测试
相比于其他的python开发IDE,PyCharm自身的优势无疑是十分明显的，而作为web应用开发的IDE，PyCharm深受开发者的喜欢，而且其安装体积小，安装简单，作为python的网站开发无疑是最适合的，并且在将来将会被更多的人使用。
4.2 开发与测试环境搭建
4.2.1 系统开发环境
本课题中开发语言选用了python，全部开发工作在 Ubuntu12.04操作系统下的 Pycharm最新社区免费版本中开发，前端调试环境为firefox和chrome，后端调试环境为curl程序和PyCharm自带的调试工具
4.2.2 pycharm配置
使用pycharm需要配置jdk环境才行，下面先介绍如何配置jdk环境。
首先在网址http://www.oracle.com/technetwork/
java/javase/downloads/jdk6u35-downloads-1836443.html里面选择适合自己系统的jdk下载，我的为64位系统，故而下载的是jdk-8u20-linux-x64.tar.gz，
接着解压jdk文件，并将jdk文件夹使用超级权限复制到/usr/lib/jvm目录，并使用mv命令更改文件夹名为 jdk，再使用编辑器编辑 ~/.profile文件，在文件末尾添加：export JAVA_HOME=/usr/lib/jvm/jdk，最后使用source ~/.profile更新配置文件，在命令行里面输入env grep JAVA_HOME，如果有结果，就证明java环境配置成功，在终端输入 java -version没有错误信息就证明jdk环境配置正确。
配置完jdk环境后，再安装pycharm。安装pycharm的步骤如下
1.从http://www.jetbrains.com/pycharm/download/选择最新版本下载
2.在终端解压文件，进入解压后文件夹，找到bin文件夹并进入，运行pycharm.sh文件，即可启动pycharm安装程序，在提示是否将程序放到桌面的确认框中，点击同意，这样方便以后启动pycharm。
由于之前已经配置好了jdk，在以后需要使用pycharm的地方只需要直接点击桌面的图标即可启动pycharm，其他使用方法跟一般编程IDE一样。
4.2.3 mysql安装
在linux下安装mysql非常简单，只需要在终端里面输入下面几行代码即可
Sudo apt-get install mysql-server
Sudo apt-get install mysql-client
Sudo apt-get install libmysqlclient-dev
按照安装中的提示设置root密码即可。为了将mysql设置为开机自启动，可以将/etc/init.d/mysql start加入到开机启动项，步骤：系统---首选项---启动应用程序---添加，按照提示即可完成。
测试mysql是否装好，可以在终端输入: mysql -uroot -p 再输入安装时输入的密码即可。如果无错，则表示安装成功。
为了能够在python里面使用mysql，我们需要将使用sudo apt-get install python-mysqldb，通过这样的方式即可安装mysql对与python的接口。为了验证是否安装成功，需要在终端输入python，进入python编辑模式，再输入 import MySQLdb，如果没有出错，则表明安装成功。
4.2.4 安装redis
到http://download.redis.io/releases/redis-2.8.12.tar.gz下载文件，解压进入目录，在终端输入make命令，如果提示错误，则使用 make CFLAGS=”-march=i686”命令执行。
编译成功后，在解压目录找到src，在终端输入./redis-server即可启动redisserver。
在另外一个终端输入./redis_cli即可运行redis客户端，参照redis官网即可验证redis的安装正确性。为了更改redis的端口，可以在解压文件里面找到redis.conf，编辑其中的port，并将daemonize参数的值设置为true，方便redis服务程序后台运行，再将 你的解压目录/src/redis-server 你的解压目录/redis.conf用上面的方法加入到开机启动项即可。这样每次开机都可以启动redis服务器，方便程序运行。
为了能够在python里使用redis，需要去网站http://pypi.python.org/pypi?%3Aaction=search&term=redis&submit=search下载文件，解压文件，进入解压目录，使用python setup.py install即可安装，为了验证是否安装成功，需要在终端输入python，再在python编辑器输入import redis，如果没有提示出错，那么表示我们已经能在python里面使用redis了。
4.3 管理平台的开发
关于tornado的配置和相关函数api使用，已经在前面介绍tornado的时候介绍过了，这里略过不表。
由于动态网站大多数都是跟数据库做交互的，因此一个系统的数据库往往是其核心功能的表现。本平台的数据库设计如下所示。
(使用windows平台下的工具画相关数据库结构图)
(使用其他工具展现数据库的具体内容)

4.3.1用户登录注册功能
用户登录注册界面如图所示
（）待贴图

本系统的用户分为两种，一种是普通商家，一种是超级管理员。
普通商家服务器程序监听9999端口，普通商家具有注册与登录功能，当用户按照前端提示填写完注册信息并提交后，服务器端首先在ordinary_user表里检索已经审核通过表的用户名，电话，邮箱，公司名是否有重复，如果有重复，跳转到前端提示用户信息已经存在，如果没有重复，将营业执照图片保存在/static/pic/license目录下，文件名为原文件名加上时间戳，同时将相关数据存入ordinary_user表，状态设置为待审核；用户填写完登录信息并提交后，服务器端在ordinary_user表里面查找匹配前端传递过来的信息，如果查找到的用户状态为审核通过，则生成用户token和cookie，标记用户登录成功，否则返回前端，提示用户名或者密码错误。
超级管理员服务器程序监听19999端口，超级管理员只有登录功能，如果需要添加超级管理员，需要联系后台开发人员手动添加信息。超级管理员用户在前端提交登录信息后，服务器端到admin_user表里面查找用户名密码信息，如果数据库里面有相关信息，则设置token和cookie，跳转到登录以后的界面，否则返回登录界面，提示用户名密码错误
4.3.2 商家对菜式的增加和菜式的修改删除
商家登录成功以后，选择上传菜式功能，按照页面提示提交菜式信息后，服务器端保存菜式图片到/static/pic/dish目录下，并调用数据库事务程序，将菜式信息写入menu表，菜式对应的游戏写入menu_game表，菜式对应的菜系写入menu_type表，菜式对应的主食材写入menu_material表，并将菜式的优惠menu_bonus默认设置为1。如果任何一条sql语句执行错误，则数据库执行回滚操作。以上插入的各条信息状态都是2即待审核状态。以上各个表都可以根据menu_id和user_id联合查找到其他信息。
商家在菜式管理里面可以看到已经审核通过的菜式信息，如果用户想更改菜式所属游戏，在更新游戏网页填写信息并提交后，服务器端程序首先根据menu_id和user_id在menu_game里面找到相关信息，将状态设置为3即已经删除状态，同时将前端传递过来的菜式游戏信息插入到menu_game表里面，状态设置为审核通过即1。
商家点击更新菜单后，服务器端根据menu_id和user_id到menu表单查找相关信息，如果信息为空，则这个路径为用户私自伪造的，跳转到404.html页面，如果信息不为空，则取出菜式的相关信息并返回给前端，商家根据页面提示操作并提交后，后台接收信息，审核参数合法性，根据menu_id更新menu表的信息即可。
商家点击删除菜单后，服务器端检查用户传递过来的参数的合法性，如果合法，则使用事务操作，根据menu_id和user_id分别更新menu，menu_game，menu_type，menu_matirial，menu_bonus表里面对应条目的状态为3即删除状态，执行成功则写入数据库，不成功则执行回滚操作，并返回给前端相关错误信息。
4.3.3商家更新菜式优惠信息
在优惠管理里面有三种更新方式，一种是对单个菜式进行优惠操作，一种是根据菜系将所有属于某个菜系的菜品优惠集体更新，还有一种是根据菜式主食材对菜式优惠进行更新。
设定了菜式优惠后，客户端应用可以请求某个菜品的优惠，客户端应用根据游戏关卡和难度将菜式的优惠进行分级设置，初始菜式优惠为请求到的菜式优惠，客户端再依据不同等级将菜式优惠设置为pi*n，其中pi为一个百分比，n为从服务器端返回的默认优惠，这样就可以刺激移动端使用者较强的使用移动端应用。

4.3.4 超管管理员审核用户和审核菜式流程
redis

4.3.5超级管理员用户管理功能
服务器端根据用户信息的创建时间展示数据，超管可以在前端根据用户名搜索某个用户名的注册请求情况和用户相关信息。同时超管可以点击用户名，进入用户的详情信息页，展示用户的基本信息和用户上传的所有菜式，管理员可以通过查看用户上传的信息是否多次包含色情，反动信息决定是否将用户拉黑

4.3.6 超管后台日志查看信息
在涉及到更改数据库数据更新的地方将用户的操作信息写入log表，搜集商家用户和超管用户的操作信息，方便监控系统的使用情况，可以根据商家用户id或超管用户id或者操作类型来查询相关操作记录，也可以直接点击操作者用户名来查看某个用户的所有操作记录。












5  总结 
5.1  论文的主要工作 
本文给出了基于web的菜式推广管理平台的设计与开发的主要实现过程，研究的主要内容分为菜式推广管理平台的背景研究、技术分析、环境搭建、平台设计、平台的实现与测试。 
具体工作如下： 
1. 对菜式推广应用进行了需求分析和技术分析，通过对用户需求的分析，确定了菜式推广应用的设计方向，通过对后台研发的研究和tornado的学习，明确了基于tornado开发菜式推广管理平台具备技术上的可行性。 
2. 完成了基于web的菜式推广平台的设计与实现，首先介绍了系统开发、测试环境的配置方式，并且对菜式推广管理平台的web界面和交互进行了分析与设计，并设计了多种使用场景和使用用户，有助于管理移动端应用的菜式管理，激发消费者使用移动端应用的热情。然后对平台的各个功能模块和使用场景进行了概要设计和详细设计，并使用Pycharm集成开发环境实现了该菜式推广管理平台，再使用花生壳服务映射域名到本人的开发主机，以便提供域名访问 
5.2   本文的不足之处 
由于受本人的时间所限，本研究还存在一些不足之处：系统的功能还有待完善。由于系统缺少用户座位信息实时更新系统，不能返回给客户端实时座位信息；由于移动端应用的开发者已经毕业，客户端与服务器端的信息交流方式与信息交换格式无法确定，只能在服务器端根据本人理解留存接口，为移动端应用提供访问接口。另外平台可扩展的空间十分巨大，为将来在此应用内添加更多的游戏模块做了设计和技术上的准备。
本次课题仅设计和实现了服务器端的开发，今后可以进一步实现服务器与应用端的交互信息开发，服务器端接收和实时座位信息变更。并返回给客户端等功能。

参考文献：
1.
2.
3.
4.
5.
6.
7.
8.
9.
10.
11.
12.
13.
14.
15.
16.
17.
18.
19.
20.
21.
22.



致谢
值此本科学位论文完成之际，首先要感谢我的导师王翀老师。王老师从一开始的论文方向的选定，到最后的整篇论文的完成，都非常耐心的对我进行指导，给予我无私的帮助和支持，提出了许多宝贵的意见。在此向王老师致以崇高的敬意和衷心的感谢。
大学四年的生活一晃而过，借此文的机会感谢这四年来给予我帮助的所有人。一直认为我无比地幸运，受到了这么多人的帮助和提携，在顺境和逆境中，都总有人帮助我勇往直前。感激之情无以回报，在这里一并感谢。
感谢武汉大学，给予了我四年自由成长的空间。纵然四年里没少了抱怨、批评与讥讽，但是如若不是在这里，也许我们选择的道路就会完全不同。
感谢父母，他们给了我坐在这里，敲下这些字的所有机会。

